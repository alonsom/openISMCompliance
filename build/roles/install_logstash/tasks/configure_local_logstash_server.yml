---
# ==============================================================================
# This task definition file describes the tasks that will configure an ELK
# server.
# ==============================================================================   
- set_fact:
    ssl_certificate_folder: "{{logstash_cygwin_path}}"
    ssl_key_folder: "{{logstash_cygwin_path}}"
    
# Check whether an SSL cert already exists and store the result.
- name: check if certs exist already
  when: using_certificates is defined
  stat:
    path: "{{ssl_certificate_folder}}/logstash-forwarder.crt"
  register: logstash_cert

- name: Update the logstash_openssl config
  when: using_certificates is defined
  template:
    src: logstash_openssl.cnf
    dest: "/etc/pki/tls/logstash_openssl.cnf"
#not logstash_cert.stat.exists
    
### Create an SSL certificate LOCALLY if one doesnt already exist.
### the only real possible variable in the command is the
### subject name. However it is recommended to leave it as "ELK".
### multiname subject names (e.g elk.example.com) are NOT supported
### and will break filebeats ability to talk to logstash.
### If you do change ELK to some other word, update the client install
### script to reflect the new name (in the host file edit task)
- name: generate OpenSSL certificate
  when: using_certificates is defined
#not logstash_cert.stat.exists
  delegate_to: localhost
  command: "openssl req -subj '/CN=ELK' -x509 -days 3650 -batch -nodes -newkey rsa:2048 -keyout {{ansible_ssl_key_folder}}/logstash-forwarder.key -out {{ansible_ssl_certificate_folder}}/logstash-forwarder.crt -config /etc/pki/tls/logstash_openssl.cnf"

### We push the SSL cert and key to Logstash server
### This is because we will push it out to all clients later
### and having it stored locally makes that push easier.
### It also means the ansible machine is one step closer to
### being set up for log gathering if thats your thing.
- name: copy SSL cert to Logstash folder
  when: using_certificates is defined
  copy:
    src: "{{ansible_ssl_certificate_folder}}/logstash-forwarder.crt"
    dest: "{{ssl_certificate_folder}}/logstash-forwarder.crt"

- name: copy SSL key to Logstash folder
  when: using_certificates is defined
  copy:
    src: "{{ansible_ssl_key_folder}}/logstash-forwarder.key"
    dest: "{{ssl_key_folder}}/logstash-forwarder.key"
    
#
# Install any required plugin
#
- name: Update the logstash-plugin command
  template:
    src: logstash-plugin.bat
    dest: "{{logstash_cygwin_bin_path}}/logstash-plugin.bat"
    force: yes

- name: Update the logstash command
  template:
    src: logstash.bat
    dest: "{{logstash_cygwin_bin_path}}/logstash.bat"
    
- name: Install the logstash-output-exec plugin (required for output to a local file)
  shell: cmd /C "{{logstash_bin_path}}/logstash-plugin.bat install logstash-output-exec"
    
- name: Install the logstash-filter-translate plugin 
  shell: cmd /C "{{logstash_bin_path}}/logstash-plugin.bat install logstash-filter-translate"
  
- name: Configure Logstash test filter
  template:
    src: testFilter.conf
    dest: "{{logstash_cygwin_config_path}}/testFilter.conf"
    owner: "SYSTEM"
    force: yes

- name: Configure Logstash test filter script
  copy:
    src: test.ps1
    dest: "{{logstash_cygwin_config_path}}/test.ps1"
    force: yes

- name: Copy associated dictionary
  template:
    src: windows_approved_executables.yml
    dest: "{{logstash_cygwin_config_path}}/windows_approved_executables.yml"
#    owner: "SYSTEM"
    force: yes
...

